version: '3.8'

services:

  #mysql
  mysql:
    image: mysql:8.0.36
    container_name: mysql
    ports:
      - "3306:3306"
    command: --character-set-server=utf8 --collation-server=utf8_general_ci
    environment:
      MYSQL_ROOT_PASSWORD: waSGz3gFlJq5WmX
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - spring-network

#mysql: Tên dịch vụ.
#image: mysql:8.0.36: Sử dụng hình ảnh MySQL phiên bản 8.0.36.
#container_name: mysql: Đặt tên cho container là mysql.
#ports: - "3306:3306": Mở cổng 3306 để truy cập MySQL.
#command: Thiết lập mã hóa ký tự và collation mặc định là UTF-8.
#environment: Đặt mật khẩu root của MySQL.
#volumes: Gắn kết dữ liệu MySQL với volume mysql-data.
#networks: Kết nối vào mạng spring-network.
  #mongo
  mongo:
    image: mongo:5.0.26
    container_name: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: waSGz3gFlJq5WmX
    volumes:
      - mongo-data:/data/db
    networks:
      - spring-network

  #redis
  redis:
    image: redis:6.2.14
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - spring-network

  #zookeeper
  zookeeper-01:
    image: confluentinc/cp-zookeeper:6.2.15
    container_name: zookeeper-01
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVERS: zookeeper-01:2888:3888;zookeeper-02:2888:3888;zookeeper-03:2888:3888
    networks:
      - spring-network

  zookeeper-02:
    image: confluentinc/cp-zookeeper:6.2.15
    container_name: zookeeper-02
    ports:
      - "2182:2182"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2182
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVERS: zookeeper-01:2888:3888;zookeeper-02:2888:3888;zookeeper-03:2888:3888
    networks:
      - spring-network

  zookeeper-03:
    image: confluentinc/cp-zookeeper:6.2.15
    container_name: zookeeper-03
    ports:
      - "2183:2183"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2183
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVERS: zookeeper-01:2888:3888;zookeeper-02:2888:3888;zookeeper-03:2888:3888
    networks:
      - spring-network

  #kafka-broker
  kafka-broker-01:
    image: confluentinc/cp-kafka:6.2.15
    container_name: kafka-broker-01
    ports:
      - "9092:9092"
      - "19092:19092"
      - "29092:29092"
    depends_on:
      - zookeeper-01
      - zookeeper-02
      - zookeeper-03
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-broker-01:9092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:19092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper-01:2181,zookeeper-02:2182,zookeeper-03:2183"
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    networks:
      - spring-network

  kafka-broker-02:
    image: confluentinc/cp-kafka:6.2.15
    container_name: kafka-broker-02
    ports:
      - "9093:9093"
      - "19093:19093"
      - "29093:29093"
    depends_on:
      - zookeeper-01
      - zookeeper-02
      - zookeeper-03
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-broker-02:9093,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:19093,DOCKER://host.docker.internal:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper-01:2181,zookeeper-02:2182,zookeeper-03:2183"
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    networks:
      - spring-network

  kafka-broker-03:
    image: confluentinc/cp-kafka:6.2.15
    container_name: kafka-broker-03
    ports:
      - "9094:9094"
      - "19094:19094"
      - "29094:29094"
    depends_on:
      - zookeeper-01
      - zookeeper-02
      - zookeeper-03
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-broker-03:9094,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:19094,DOCKER://host.docker.internal:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper-01:2181,zookeeper-02:2182,zookeeper-03:2183"
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    networks:
      - spring-network

  #kafka-ui
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "18080:8080"
    depends_on:
      - kafka-broker-01
      - kafka-broker-02
      - kafka-broker-03
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka.cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka-broker-01:9092,kafka-broker-02:9093,kafka-broker-03:9094"
      KAFKA_CLUSTERS_0_ZOOKEEPER: "zookeeper-01:2181,zookeeper-02:2182,zookeeper-03:2183"
    networks:
      - spring-network

  #debezium
  debezium:
    image: debezium/connect:1.7.2.Final
    container_name: debezium
    ports:
      - "8083:8083"
    depends_on:
      - kafka-broker-01
      - kafka-broker-02
      - kafka-broker-03
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium-confixg
      OFFSET_STORAGE_TOPIC: debezium-offset
      STATUS_STORAGE_TOPIC: debezium-status
      BOOTSTRAP_SERVERS: "kafka-broker-01:9092,kafka-broker-02:9093,kafka-broker-03:9094"
    networks:
      - spring-network

  #rabbitmq
  rabbitmq-node-01:
    image: rabbitmq:3.8.34-management
    hostname: rabbitmq-node-01
    container_name: rabbitmq-node-01
    ports:
      - "5672:5672"
      - "15672:15672"
    command: [ "bash", "-c", "chmod 600 /var/lib/rabbitmq/.erlang.cookie && rabbitmq-server" ]
    volumes:
      - ./rabbitmq/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie
      - ./rabbitmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    networks:
      - spring-network

  rabbitmq-node-02:
    image: rabbitmq:3.8.34-management
    hostname: rabbitmq-node-02
    container_name: rabbitmq-node-02
    ports:
      - "5673:5673"
    depends_on:
      - rabbitmq-node-01
    command: [ "bash", "-c", "chmod 600 /var/lib/rabbitmq/.erlang.cookie && rabbitmq-server" ]
    volumes:
      - ./rabbitmq/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie
      - ./rabbitmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    networks:
      - spring-network

  rabbitmq-node-03:
    image: rabbitmq:3.8.34-management
    hostname: rabbitmq-node-03
    container_name: rabbitmq-node-03
    ports:
      - "5674:5674"
    depends_on:
      - rabbitmq-node-01
    command: [ "bash", "-c", "chmod 600 /var/lib/rabbitmq/.erlang.cookie && rabbitmq-server" ]
    volumes:
      - ./rabbitmq/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie
      - ./rabbitmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    networks:
      - spring-network

volumes:
  mysql-data:
    driver: local
  mongo-data:
    driver: local
  redis-data:
    driver: local

networks:
  spring-network:
    driver: bridge
